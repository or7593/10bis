<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-04-27T20:16:18 IDT" name="Suite" finished-at="2021-04-27T20:18:45 IDT" duration-ms="147690">
    <groups>
    </groups>
    <test started-at="2021-04-27T20:16:18 IDT" name="Test" finished-at="2021-04-27T20:18:45 IDT" duration-ms="147690">
      <class name="tests.SanityTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:17:51 IDT" name="beforeClass" finished-at="2021-04-27T20:17:58 IDT" duration-ms="7106" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:17:58 IDT" name="beforeMethod" finished-at="2021-04-27T20:17:58 IDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.SanityTest.GoingToRestaurant() throws java.lang.InterruptedException,java.io.IOException,javax.xml.parsers.ParserConfigurationException,org.xml.sax.SAXException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="GoingToRestaurant()[pri:1, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:17:58 IDT" name="GoingToRestaurant" description="Going to restaurant page" finished-at="2021-04-27T20:18:24 IDT" duration-ms="26077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GoingToRestaurant -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:18:24 IDT" name="afterMethod" finished-at="2021-04-27T20:18:24 IDT" duration-ms="415" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GoingToRestaurant status=SUCCESS method=SanityTest.GoingToRestaurant()[pri:1, instance:tests.SanityTest@5e316c74] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:18:24 IDT" name="beforeMethod" finished-at="2021-04-27T20:18:24 IDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.SanityTest.GoingToOrderPage() throws java.lang.InterruptedException,java.io.IOException,javax.xml.parsers.ParserConfigurationException,org.xml.sax.SAXException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="GoingToOrderPage()[pri:2, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:18:24 IDT" name="GoingToOrderPage" description="Going to order page" finished-at="2021-04-27T20:18:32 IDT" duration-ms="7265" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at tests.SanityTest.GoingToOrderPage(SanityTest.java:122)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GoingToOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:18:32 IDT" name="afterMethod" finished-at="2021-04-27T20:18:32 IDT" duration-ms="204" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GoingToOrderPage status=FAILURE method=SanityTest.GoingToOrderPage()[pri:2, instance:tests.SanityTest@5e316c74] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.SanityTest@5e316c74]" started-at="2021-04-27T20:18:32 IDT" name="afterClass" finished-at="2021-04-27T20:18:33 IDT" duration-ms="874" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.SanityTest -->
      <class name="tests.CareerTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.CareerTest@48fa0f47]" started-at="2021-04-27T20:16:32 IDT" name="beforeClass" finished-at="2021-04-27T20:16:38 IDT" duration-ms="6730" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.CareerTest@48fa0f47]" started-at="2021-04-27T20:16:38 IDT" name="beforeMethod" finished-at="2021-04-27T20:16:38 IDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.CareerTest.ClickOnJobField() throws java.lang.InterruptedException,java.io.IOException,javax.xml.parsers.ParserConfigurationException,org.xml.sax.SAXException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="ClickOnJobField()[pri:1, instance:tests.CareerTest@48fa0f47]" started-at="2021-04-27T20:16:38 IDT" name="ClickOnJobField" description="Verify job finding field" finished-at="2021-04-27T20:17:08 IDT" duration-ms="30023" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ClickOnJobField -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.CareerTest@48fa0f47]" started-at="2021-04-27T20:17:08 IDT" name="afterMethod" finished-at="2021-04-27T20:17:09 IDT" duration-ms="610" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ClickOnJobField status=SUCCESS method=CareerTest.ClickOnJobField()[pri:1, instance:tests.CareerTest@48fa0f47] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.CareerTest@48fa0f47]" started-at="2021-04-27T20:17:09 IDT" name="afterClass" finished-at="2021-04-27T20:17:10 IDT" duration-ms="1108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.CareerTest -->
      <class name="tests.ErrorLoginTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.ErrorLoginTest@6d2a209c]" started-at="2021-04-27T20:18:33 IDT" name="beforeClass" finished-at="2021-04-27T20:18:39 IDT" duration-ms="6746" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ErrorLoginTest@6d2a209c]" started-at="2021-04-27T20:18:39 IDT" name="beforeMethod" finished-at="2021-04-27T20:18:39 IDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ErrorLoginTest.errMessage() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="errMessage()[pri:1, instance:tests.ErrorLoginTest@6d2a209c]" started-at="2021-04-27T20:18:39 IDT" name="errMessage" description="verify eror message on page" finished-at="2021-04-27T20:18:44 IDT" duration-ms="4783" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- errMessage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ErrorLoginTest@6d2a209c]" started-at="2021-04-27T20:18:44 IDT" name="afterMethod" finished-at="2021-04-27T20:18:44 IDT" duration-ms="359" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=errMessage status=SUCCESS method=ErrorLoginTest.errMessage()[pri:1, instance:tests.ErrorLoginTest@6d2a209c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.ErrorLoginTest@6d2a209c]" started-at="2021-04-27T20:18:44 IDT" name="afterClass" finished-at="2021-04-27T20:18:45 IDT" duration-ms="856" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.ErrorLoginTest -->
      <class name="tests.RegistrationTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:18 IDT" name="beforeClass" finished-at="2021-04-27T20:16:25 IDT" duration-ms="7469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:25 IDT" name="beforeMethod" finished-at="2021-04-27T20:16:25 IDT" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegistrationTest.goToRegister() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="goToRegister()[pri:1, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:25 IDT" name="goToRegister" description="verify registration page" finished-at="2021-04-27T20:16:26 IDT" duration-ms="628" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- goToRegister -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:26 IDT" name="afterMethod" finished-at="2021-04-27T20:16:26 IDT" duration-ms="549" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=goToRegister status=SUCCESS method=RegistrationTest.goToRegister()[pri:1, instance:tests.RegistrationTest@159f197] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:26 IDT" name="beforeMethod" finished-at="2021-04-27T20:16:26 IDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegistrationTest.fillRegistrationDetails() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fillRegistrationDetails()[pri:2, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:26 IDT" name="fillRegistrationDetails" description="verify registration page" finished-at="2021-04-27T20:16:29 IDT" duration-ms="2838" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillRegistrationDetails -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:29 IDT" name="afterMethod" finished-at="2021-04-27T20:16:30 IDT" duration-ms="396" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=fillRegistrationDetails status=SUCCESS method=RegistrationTest.fillRegistrationDetails()[pri:2, instance:tests.RegistrationTest@159f197] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.RegistrationTest@159f197]" started-at="2021-04-27T20:16:30 IDT" name="afterClass" finished-at="2021-04-27T20:16:32 IDT" duration-ms="1960" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.RegistrationTest -->
      <class name="tests.MinimumOrderError">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.MinimumOrderError@6ac13091]" started-at="2021-04-27T20:17:10 IDT" name="beforeClass" finished-at="2021-04-27T20:17:17 IDT" duration-ms="6777" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.MinimumOrderError@6ac13091]" started-at="2021-04-27T20:17:17 IDT" name="beforeMethod" finished-at="2021-04-27T20:17:17 IDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.MinimumOrderError.MininumOrderTest() throws java.lang.InterruptedException,java.io.IOException,javax.xml.parsers.ParserConfigurationException,org.xml.sax.SAXException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="MininumOrderTest()[pri:1, instance:tests.MinimumOrderError@6ac13091]" started-at="2021-04-27T20:17:17 IDT" name="MininumOrderTest" description="Verify an error message that the price is below the minimum" finished-at="2021-04-27T20:17:50 IDT" duration-ms="32801" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MininumOrderTest -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.MinimumOrderError@6ac13091]" started-at="2021-04-27T20:17:50 IDT" name="afterMethod" finished-at="2021-04-27T20:17:50 IDT" duration-ms="178" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MininumOrderTest status=SUCCESS method=MinimumOrderError.MininumOrderTest()[pri:1, instance:tests.MinimumOrderError@6ac13091] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.MinimumOrderError@6ac13091]" started-at="2021-04-27T20:17:50 IDT" name="afterClass" finished-at="2021-04-27T20:17:51 IDT" duration-ms="876" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.MinimumOrderError -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
